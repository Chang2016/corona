/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package corona

fun main(args: Array<String>) {
    val michaelState: InfectionState  = InfectionState(false, false)
    val michael: Person = Person("Michael", 45, michaelState)

    val borisState: InfectionState  = InfectionState(true, false)
    val boris: Person = Person("Boris", 55, borisState)

    val personList = ArrayList<Person>()
    personList.add(michael)
    personList.add(boris)
    println(findInfected(personList))
    countToX(12)
    println("Michael".lastChar())

}

data class Person(val name: String,
                  val age: Int,
                  var infectionState: InfectionState) {
    //custom getter without a field to store it's value
    val shouldStayAtHome: Boolean
        get() {
            return !infectionState.infected && infectionState.antiBody
        }
}

data class InfectionState(val infected: Boolean,
                          val antiBody: Boolean)

//Funktion mit expression body also ohne geschweifte Klammern, return type ist Int wegen type inference
fun findOldest(a: Person, b: Person) = if(a.age > b.age) a else b

//Funktion mit block body return type wird am Ende explizit angegeben
fun findInfected(persons: ArrayList<Person>) : ArrayList<Person> {
    val infectedPersons = ArrayList<Person>()
    for(p in persons) {
        if(p.infectionState.infected)
            infectedPersons.add(p)
    }
    return infectedPersons;
}

// Funktion mit default-Parameter
fun countToX(count: Int = 10) {
    val range = 0 .. count
    // for-Loop mit step size
    for(c in range step 2) {
        println("$c")
    }
}

fun String.lastChar(): Char = get(length - 1)


